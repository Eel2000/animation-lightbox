@page "/"
@inherits BlazorCanvas.Shared.CanvasComponentBase
<div style="width: @(width)px; height: @(height)px;" class="canvas-wrapper bg-white mx-auto">
    <canvas height="@height" width="@width" id="@_id-prev2"></canvas>
    <canvas height="@height" width="@width" id="@(_id + _onionSkinsIdSuffix)"></canvas>
    <canvas height="@height" width="@width" id="@_id" 
    @onmousedown="OnMouseDownCanvas" @onmousemove="OnMouseMoveCanvas" @onmouseup="OnMouseUpCanvas" @onmouseout="OnMouseOutCanvas"
    @ontouchstart="OnTouchStartCanvas" @ontouchmove="OnTouchMoveCanvas" @ontouchend="OnTouchEndCanvas"
    @onkeydown="OnKeyDown" tabindex="0"></canvas>
</div>
<div class="canvas-controller mx-auto" style="width: @(width)px;">
    <p class="text-white mb-1">@_text</p>
    <button class="btn btn-primary" @onclick="OnAddButtonClicked" disabled="@_play">Add</button>
    <button class="btn btn-secondary" @onclick="OnUndoButtonClicked" disabled="@_play">Undo</button>
    <button class="btn btn-secondary" @onclick="OnClearButtonClicked" disabled="@_play">Clear</button>
    <button class="btn btn-primary" @onclick="OnPlayButtonClicked" disabled="@_play">Play</button>
    <button class="btn btn-danger" @onclick="OnStopButtonClicked" disabled="@(!_play)">Stop</button>
    <div class="btn-toolbar mt-2 d-inline" role="toolbar" aria-label="Toolbar with button groups">
        <div class="btn-group mr-2" role="group" aria-label="First group">
            @for(var i=1;i<=_numberOfFrames;i++)
            {
                var number = i;
                <button type="button" class="btn btn-secondary" @key="number" @onclick="() => OnClickNumberButton(number-1)">@i</button>
            }
        </div>
    </div>
    <div class="onionskins-controller">
        <input type="number" class="form-control" id="number-of-onionskins" min="0" max="10" value="5" style="width: 100px;" @oninput="OnOnionSkinsNumberChanged">
    </div>
</div>
@code {
    int height = 810;
    int width = 1440;
    string _text = "";
    private readonly string _id = Guid.NewGuid().ToString();
    private readonly string _onionSkinsIdSuffix = "-onion-skins";

    int _numberOfFrames = 1;
    int _currentFrame = 0;

    bool _isDrawing = false;

    bool _play = false;

    (double X,double Y) _point = (0,0);

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender) 
        {
            await InitializeCanvas(_id,_onionSkinsIdSuffix);
            _point = await GetStartPosition();
            //Console.WriteLine($"{p[0]},{p[1]}");
        }
        await base.OnInitializedAsync();
    }
#region MouseEvent
    private async Task OnMouseDownCanvas(MouseEventArgs e)
    {
        await OnDrawStart(e.ClientX,e.ClientY );        
    }

    private async Task OnMouseMoveCanvas(MouseEventArgs e)
    {
        await OnDrawLine(e.ClientX,e.ClientY);
        _text = $"({e.ClientX - _point.X}, {e.ClientY - _point.Y}) : {e.Buttons}";
    }

    private async Task OnMouseUpCanvas(MouseEventArgs e)
    {
        await OnDrawEnd(e.ClientX, e.ClientY);
    }

    private async Task OnMouseOutCanvas(MouseEventArgs e)
    {
        //Console.WriteLine($"onmouseout fired {e.Button}");
        await OnDrawEnd(e.ClientX, e.ClientY);
    }
#endregion

#region Touch Events
    private async Task OnTouchStartCanvas(TouchEventArgs e)
    {
        var p = e.Touches[0];
        await OnDrawStart(p.ClientX, p.ClientY);
    }

    private async Task OnTouchMoveCanvas(TouchEventArgs e)
    {
        var p = e.Touches[0];
        await OnDrawLine(p.ClientX, p.ClientY);
    }

    private async Task OnTouchEndCanvas(TouchEventArgs e)
    {
        var p = e.Touches[0];
        await OnDrawEnd(p.ClientX, p.ClientY);
    }

#endregion

    private async Task OnKeyDown(KeyboardEventArgs e)
    {
        Console.WriteLine($"{e.Key} pushed. Code: {e.Code} Ctrl: {e.CtrlKey}");
        switch(e.Code)
        {
            case "KeyZ" : 
                if(e.CtrlKey) await Undo();
                break;

            case "KeyY" : 
                if(e.CtrlKey) await Redo();
                break;
        };
    }

    private async Task OnClickNumberButton(int n)
    {
        //Console.WriteLine($"Current frame:{_currentFrame} Input number: {n}");
        await SaveFrame(_currentFrame);
        await SetCurrentFrameNumber(n);
        _currentFrame = n;
    }

    private async Task OnOnionSkinsNumberChanged(ChangeEventArgs e)
    {
        if(int.TryParse(e.Value.ToString(), out int num))
            await SetOnionSkinsPrevFrameCount(num);    
    }

    private async Task OnAddButtonClicked()
    {
        await SaveFrame(_currentFrame);
        await AddNewFrame();
        await ClearCanvas();
        await SetCurrentFrameNumber(_numberOfFrames);
        _currentFrame = _numberOfFrames;
        _numberOfFrames++;
    }

    private async Task OnDrawStart(double x, double y)
    {
        _isDrawing = true;
        await DrawStart(x,y);
        await SaveHistory();
    }

    private async Task OnDrawLine(double x, double y)
    {
        if(_isDrawing) await DrawLine(x,y);
    }

    private async Task OnDrawEnd(double x, double y)
    {
        if(_isDrawing)
        {
            await DrawLine(x,y);
        }
        _isDrawing = false;
    }

    private async Task OnPlayButtonClicked()
    {
        _play = true;
        await SaveFrame(_currentFrame);
        await StartAnimation();
    }
    private async Task OnStopButtonClicked()
    {
        _play = false;
        await StopAnimation();
    }

    private async Task OnClearButtonClicked()
    {
        await ClearCanvas();
    }

    private async Task OnUndoButtonClicked()
    {
        await Undo();
    }
}