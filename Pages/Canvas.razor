@page "/"
@inherits BlazorCanvas.Shared.CanvasComponentBase

<div class="canvas-sidebar"></div>
<div class="canvas-main">
    <div style="width: @(width)px; height: @(height)px;" class="canvas-wrapper bg-white mt-5 mx-auto">
        <canvas height="@height" width="@width" id="@(_id + _onionSkinsIdSuffix)"></canvas>
        <canvas height="@height" width="@width" id="@_id" 
        @onmousedown="OnMouseDownCanvas" @onmousemove="OnMouseMoveCanvas" @onmouseup="OnMouseUpCanvas" @onmouseout="OnMouseOutCanvas"
        @ontouchstart="OnTouchStartCanvas" @ontouchmove="OnTouchMoveCanvas" @ontouchend="OnTouchEndCanvas"
        @onkeydown="OnKeyDown" tabindex="0"></canvas>
    </div>

    <div class="canvas-controller mx-auto" style="width: @(width)px;" >
        <CanvasControl Message="@_text"/>
    </div>
</div>

@code {
    int height = 720;
    int width = 1280;
    string _text = "";
    private readonly string _id = Guid.NewGuid().ToString();
    private readonly string _onionSkinsIdSuffix = "-onion-skins";

    bool _isDrawing = false;

    (double X,double Y) _point = (0,0);

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender) 
        {
            await InitializeCanvas(_id,_onionSkinsIdSuffix);
            _point = await GetStartPosition();
        }
        await base.OnInitializedAsync();
    }
#region MouseEvent
    private async Task OnMouseDownCanvas(MouseEventArgs e)
    {
        await OnDrawStart(e.ClientX,e.ClientY );        
    }

    private async Task OnMouseMoveCanvas(MouseEventArgs e)
    {
        await OnDrawLine(e.ClientX,e.ClientY);
        _text = $"({e.ClientX - _point.X}, {e.ClientY - _point.Y}) : {e.Buttons}";
    }

    private async Task OnMouseUpCanvas(MouseEventArgs e)
    {
        await OnDrawEnd(e.ClientX, e.ClientY);
    }

    private async Task OnMouseOutCanvas(MouseEventArgs e)
    {
        await OnDrawEnd(e.ClientX, e.ClientY);
    }
#endregion

#region Touch Events
    private async Task OnTouchStartCanvas(TouchEventArgs e)
    {
        var p = e.Touches[0];
        await OnDrawStart(p.ClientX, p.ClientY);
    }

    private async Task OnTouchMoveCanvas(TouchEventArgs e)
    {
        var p = e.Touches[0];
        await OnDrawLine(p.ClientX, p.ClientY);
    }

    private async Task OnTouchEndCanvas(TouchEventArgs e)
    {
        var p = e.Touches[0];
        await OnDrawEnd(p.ClientX, p.ClientY);
    }

#endregion

    private async Task OnKeyDown(KeyboardEventArgs e)
    {
        switch(e.Code)
        {
            case "KeyZ" : 
                if(e.CtrlKey) await Undo();
                break;

            case "KeyY" : 
                if(e.CtrlKey) await Redo();
                break;
        };
    }

    private async Task OnDrawStart(double x, double y)
    {
        _isDrawing = true;
        await DrawStart(x,y);
        await SaveHistory();
    }

    private async Task OnDrawLine(double x, double y)
    {
        if(_isDrawing) await DrawLine(x,y);
    }

    private async Task OnDrawEnd(double x, double y)
    {
        if(_isDrawing)
        {
            await DrawLine(x,y);
        }
        _isDrawing = false;
    }
}